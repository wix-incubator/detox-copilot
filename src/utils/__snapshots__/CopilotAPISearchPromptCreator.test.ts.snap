// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CopilotAPISearchPromptCreator should create the prompt properly 1`] = `
"# API Method Search

## Task Description

Find API methods and categories that semantically match this task: "tap the login button"

## Search Context
The following results are based on semantic similarity to your task. They represent potential matches that should be carefully evaluated, not necessarily the optimal or recommended solutions.

## Available API Methods

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts.


## Instructions

1. Analyze the semantic patterns in the task:
   - Key terms and actions
   - Object and state descriptions
   - Expected behaviors and outcomes

2. Review semantic matches found:
   - Evaluate similarity scores
   - Consider partial matches
   - Note contextual relevance

3. For each semantic match, assess:
   - Match confidence level
   - Contextual applicability
   - Potential limitations

Please provide your response in the following format:

\`\`\`
Semantic Category Matches:
1. [Category Name]
   - Match Confidence: [High/Medium/Low - Why this category semantically matches]
   - Context Notes: [Important contextual considerations]
   - Limitations: [Where the semantic match might not translate to practical use]

Semantic API Matches:
1. methodName(params)
   - Match Confidence: [High/Medium/Low - Explain the semantic similarity]
   - Context Notes: [How the semantic match relates to actual usage]
   - Limitations: [Potential gaps between semantic match and practical application]
\`\`\`

Search Evaluation:
- Consider that semantic matches may not be optimal solutions
- Evaluate practical applicability beyond semantic similarity
- Look for gaps between semantic matches and actual requirements
- Consider alternative approaches if semantic matches are weak

Additional Context:
- Note the confidence level of semantic matches
- Highlight where semantic similarity might be misleading
- Suggest verification steps before accepting matches
"
`;

exports[`CopilotAPISearchPromptCreator should handle complex multi-step intent 1`] = `
"# API Method Search

## Task Description

Find API methods and categories that semantically match this task: "scroll to the bottom of the list, find the last item with title "Complete", and verify it is visible"

## Search Context
The following results are based on semantic similarity to your task. They represent potential matches that should be carefully evaluated, not necessarily the optimal or recommended solutions.

## Available API Methods

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts.


## Instructions

1. Analyze the semantic patterns in the task:
   - Key terms and actions
   - Object and state descriptions
   - Expected behaviors and outcomes

2. Review semantic matches found:
   - Evaluate similarity scores
   - Consider partial matches
   - Note contextual relevance

3. For each semantic match, assess:
   - Match confidence level
   - Contextual applicability
   - Potential limitations

Please provide your response in the following format:

\`\`\`
Semantic Category Matches:
1. [Category Name]
   - Match Confidence: [High/Medium/Low - Why this category semantically matches]
   - Context Notes: [Important contextual considerations]
   - Limitations: [Where the semantic match might not translate to practical use]

Semantic API Matches:
1. methodName(params)
   - Match Confidence: [High/Medium/Low - Explain the semantic similarity]
   - Context Notes: [How the semantic match relates to actual usage]
   - Limitations: [Potential gaps between semantic match and practical application]
\`\`\`

Search Evaluation:
- Consider that semantic matches may not be optimal solutions
- Evaluate practical applicability beyond semantic similarity
- Look for gaps between semantic matches and actual requirements
- Consider alternative approaches if semantic matches are weak

Additional Context:
- Note the confidence level of semantic matches
- Highlight where semantic similarity might be misleading
- Suggest verification steps before accepting matches
"
`;

exports[`CopilotAPISearchPromptCreator should handle empty API catalog 1`] = `
"# API Method Search

## Task Description

Find API methods and categories that semantically match this task: "tap the login button"

## Search Context
The following results are based on semantic similarity to your task. They represent potential matches that should be carefully evaluated, not necessarily the optimal or recommended solutions.

## Available API Methods



## Instructions

1. Analyze the semantic patterns in the task:
   - Key terms and actions
   - Object and state descriptions
   - Expected behaviors and outcomes

2. Review semantic matches found:
   - Evaluate similarity scores
   - Consider partial matches
   - Note contextual relevance

3. For each semantic match, assess:
   - Match confidence level
   - Contextual applicability
   - Potential limitations

Please provide your response in the following format:

\`\`\`
Semantic Category Matches:
1. [Category Name]
   - Match Confidence: [High/Medium/Low - Why this category semantically matches]
   - Context Notes: [Important contextual considerations]
   - Limitations: [Where the semantic match might not translate to practical use]

Semantic API Matches:
1. methodName(params)
   - Match Confidence: [High/Medium/Low - Explain the semantic similarity]
   - Context Notes: [How the semantic match relates to actual usage]
   - Limitations: [Potential gaps between semantic match and practical application]
\`\`\`

Search Evaluation:
- Consider that semantic matches may not be optimal solutions
- Evaluate practical applicability beyond semantic similarity
- Look for gaps between semantic matches and actual requirements
- Consider alternative approaches if semantic matches are weak

Additional Context:
- Note the confidence level of semantic matches
- Highlight where semantic similarity might be misleading
- Suggest verification steps before accepting matches
"
`;

exports[`CopilotAPISearchPromptCreator should handle empty view analysis result 1`] = `
"# API Method Search

## Task Description

Find API methods and categories that semantically match this task: "tap the login button"

## Search Context
The following results are based on semantic similarity to your task. They represent potential matches that should be carefully evaluated, not necessarily the optimal or recommended solutions.

## Available API Methods

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts.


## Instructions

1. Analyze the semantic patterns in the task:
   - Key terms and actions
   - Object and state descriptions
   - Expected behaviors and outcomes

2. Review semantic matches found:
   - Evaluate similarity scores
   - Consider partial matches
   - Note contextual relevance

3. For each semantic match, assess:
   - Match confidence level
   - Contextual applicability
   - Potential limitations

Please provide your response in the following format:

\`\`\`
Semantic Category Matches:
1. [Category Name]
   - Match Confidence: [High/Medium/Low - Why this category semantically matches]
   - Context Notes: [Important contextual considerations]
   - Limitations: [Where the semantic match might not translate to practical use]

Semantic API Matches:
1. methodName(params)
   - Match Confidence: [High/Medium/Low - Explain the semantic similarity]
   - Context Notes: [How the semantic match relates to actual usage]
   - Limitations: [Potential gaps between semantic match and practical application]
\`\`\`

Search Evaluation:
- Consider that semantic matches may not be optimal solutions
- Evaluate practical applicability beyond semantic similarity
- Look for gaps between semantic matches and actual requirements
- Consider alternative approaches if semantic matches are weak

Additional Context:
- Note the confidence level of semantic matches
- Highlight where semantic similarity might be misleading
- Suggest verification steps before accepting matches
"
`;

exports[`CopilotAPISearchPromptCreator should handle special characters in step 1`] = `
"# API Method Search

## Task Description

Find API methods and categories that semantically match this task: "verify text contains "Hello & goodbye" with <special> chars"

## Search Context
The following results are based on semantic similarity to your task. They represent potential matches that should be carefully evaluated, not necessarily the optimal or recommended solutions.

## Available API Methods

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts.


## Instructions

1. Analyze the semantic patterns in the task:
   - Key terms and actions
   - Object and state descriptions
   - Expected behaviors and outcomes

2. Review semantic matches found:
   - Evaluate similarity scores
   - Consider partial matches
   - Note contextual relevance

3. For each semantic match, assess:
   - Match confidence level
   - Contextual applicability
   - Potential limitations

Please provide your response in the following format:

\`\`\`
Semantic Category Matches:
1. [Category Name]
   - Match Confidence: [High/Medium/Low - Why this category semantically matches]
   - Context Notes: [Important contextual considerations]
   - Limitations: [Where the semantic match might not translate to practical use]

Semantic API Matches:
1. methodName(params)
   - Match Confidence: [High/Medium/Low - Explain the semantic similarity]
   - Context Notes: [How the semantic match relates to actual usage]
   - Limitations: [Potential gaps between semantic match and practical application]
\`\`\`

Search Evaluation:
- Consider that semantic matches may not be optimal solutions
- Evaluate practical applicability beyond semantic similarity
- Look for gaps between semantic matches and actual requirements
- Consider alternative approaches if semantic matches are weak

Additional Context:
- Note the confidence level of semantic matches
- Highlight where semantic similarity might be misleading
- Suggest verification steps before accepting matches
"
`;

exports[`CopilotAPISearchPromptCreator should include view analysis result when provided 1`] = `
"# API Method Search

## Task Description

Find API methods and categories that semantically match this task: "tap the login button"

## View Analysis Context

Basic Element Description:
A button in a navigation bar

Element Location Analysis:
...

## Search Context
The following results are based on semantic similarity to your task. They represent potential matches that should be carefully evaluated, not necessarily the optimal or recommended solutions.

## Available API Methods

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts.


## Instructions

1. Analyze the semantic patterns in the task:
   - Key terms and actions
   - Object and state descriptions
   - Expected behaviors and outcomes

2. Review semantic matches found:
   - Evaluate similarity scores
   - Consider partial matches
   - Note contextual relevance

3. For each semantic match, assess:
   - Match confidence level
   - Contextual applicability
   - Potential limitations

Please provide your response in the following format:

\`\`\`
Semantic Category Matches:
1. [Category Name]
   - Match Confidence: [High/Medium/Low - Why this category semantically matches]
   - Context Notes: [Important contextual considerations]
   - Limitations: [Where the semantic match might not translate to practical use]

Semantic API Matches:
1. methodName(params)
   - Match Confidence: [High/Medium/Low - Explain the semantic similarity]
   - Context Notes: [How the semantic match relates to actual usage]
   - Limitations: [Potential gaps between semantic match and practical application]
\`\`\`

Search Evaluation:
- Consider that semantic matches may not be optimal solutions
- Evaluate practical applicability beyond semantic similarity
- Look for gaps between semantic matches and actual requirements
- Consider alternative approaches if semantic matches are weak

Additional Context:
- Note the confidence level of semantic matches
- Highlight where semantic similarity might be misleading
- Suggest verification steps before accepting matches
"
`;
