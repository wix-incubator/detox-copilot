// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PromptCreator should create a prompt for an intent correctly 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a mobile application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.
If generating the relevant code is not possible due to ambiguity, invalid intent, or inability to find the desired element, return code that throws an informative error explaining the problem in one sentence.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

A snapshot image is attached for visual reference.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

1. Generate the minimal executable code to perform the following intent: "tap button"
2. Use the provided API and follow the guidelines.
3. If you cannot generate the relevant code due to ambiguity, invalid intent, or inability to find the desired element, return code that throws an informative error explaining the problem in one sentence.
4. Wrap the generated code with backticks, without any additional formatting.
5. In case the expected behavior can be tested visually based on the provided snapshot image, there's no need to generate test code for the assertion. Instead, return code that throws an error if the visual check fails, or an empty code block if the visual check passes.

### Examples of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button in the current view hierarchy.");
\`\`\`

\`\`\`typescript
throw new Error("The provided intent does not contain enough information to generate the code; 'button' is too ambiguous for matching a specific element.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should handle when no snapshot image is attached 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a mobile application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.
If generating the relevant code is not possible due to ambiguity, invalid intent, or inability to find the desired element, return code that throws an informative error explaining the problem in one sentence.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

1. Generate the minimal executable code to perform the following intent: "expect button to be visible"
2. Use the provided API and follow the guidelines.
3. If you cannot generate the relevant code due to ambiguity, invalid intent, or inability to find the desired element, return code that throws an informative error explaining the problem in one sentence.
4. Wrap the generated code with backticks, without any additional formatting.

### Examples of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button in the current view hierarchy.");
\`\`\`

\`\`\`typescript
throw new Error("The provided intent does not contain enough information to generate the code; 'button' is too ambiguous for matching a specific element.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should include previous intents in the context 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a mobile application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.
If generating the relevant code is not possible due to ambiguity, invalid intent, or inability to find the desired element, return code that throws an informative error explaining the problem in one sentence.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Previous intents

#### Step 1
- Intent: "navigate to login screen"
- Generated code:
\`\`\`
await element(by.id("login")).tap();
\`\`\`

#### Step 2
- Intent: "enter username"
- Generated code:
\`\`\`
await element(by.id("username")).typeText("john_doe");
\`\`\`


## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

1. Generate the minimal executable code to perform the following intent: "tap button"
2. Use the provided API and follow the guidelines.
3. If you cannot generate the relevant code due to ambiguity, invalid intent, or inability to find the desired element, return code that throws an informative error explaining the problem in one sentence.
4. Wrap the generated code with backticks, without any additional formatting.

### Examples of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button in the current view hierarchy.");
\`\`\`

\`\`\`typescript
throw new Error("The provided intent does not contain enough information to generate the code; 'button' is too ambiguous for matching a specific element.");
\`\`\`

Please provide your response below:"
`;
