// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PromptCreator constructor should merge redundant categories 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for an application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Testing Framework

Framework: Test Framework

Description: A testing framework for unit testing purposes

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

#### swipe(direction: string)

Swipes in the specified direction.

##### Example

\`\`\`
await swipe("up");
\`\`\`

##### Guidelines

- Use this method to scroll the screen.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

#### toBeEnabled()

Asserts that the element is enabled and can be interacted with.

##### Example

\`\`\`
await expect(element(by.id("submitButton"))).toBeEnabled();
\`\`\`

##### Guidelines

- Ensure that the element is not disabled before performing actions.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. Generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. Wrap the generated code with backticks, without any additional formatting.
7. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator extentAPICategories should extend the API catalog with new category 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for an application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

### Custom Actions

#### swipe(direction: string)

Swipes in the specified direction.

##### Example

\`\`\`
await swipe("up");
\`\`\`

##### Guidelines

- Use this method to scroll the screen.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. Generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. Wrap the generated code with backticks, without any additional formatting.
7. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator extentAPICategories should extend the API with existing category 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for an application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

#### swipe(direction: string)

Swipes in the specified direction.

##### Example

\`\`\`
await swipe("up");
\`\`\`

##### Guidelines

- Use this method to scroll the screen.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

### Custom Actions

#### swipe(direction: string)

Swipes in the specified direction.

##### Example

\`\`\`
await swipe("up");
\`\`\`

##### Guidelines

- Use this method to scroll the screen.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. Generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. Wrap the generated code with backticks, without any additional formatting.
7. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should create a prompt for an intent correctly 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for an application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

A snapshot image is attached for visual reference.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent, the view hierarchy, and the snapshot image to understand the required action.
2. Assess the positions of elements within the screen layout. Ensure that tests accurately reflect their intended locations, such as whether an element is centered or positioned relative to others. Tests should fail if the actual locations do not align with the expected configuration.
3. Determine if the intent can be fully validated visually using the snapshot image.
4. If the intent can be visually analyzed and passes the visual check, return only comments explaining the successful visual assertion.
5. If the visual assertion fails, return code that throws an informative error explaining the failure.
6. If visual validation is not possible, proceed to generate the minimal executable code required to perform the intent.
7. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
8. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
9. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
10. Wrap the generated code with backticks, without any additional formatting.
11. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of returning a commented visual test if the visual assertion passes:
\`\`\`typescript
// Visual assertion passed based on the snapshot image.
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should handle when no snapshot image is attached 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for an application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. Generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. Wrap the generated code with backticks, without any additional formatting.
7. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should include API search results when provided 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for an application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Semantic Matches from API Search

Semantic Category Matches:
1. Actions
   - Match Confidence: High - Contains tap-related actions
   - Context Notes: Direct interaction with buttons

Semantic API Matches:
1. tap(element: Element)
   - Match Confidence: High - Direct semantic match for tapping
   - Context Notes: Primary method for button interaction
2. by.id(id: string)
   - Match Confidence: Medium - Required for element selection
   - Context Notes: Used to locate the target button

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. Generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. Wrap the generated code with backticks, without any additional formatting.
7. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should include previous intents in the context 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for an application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

### Previous intents

#### Step 1
- Intent: "navigate to login screen"
- Generated code:
\`\`\`
await element(by.id("login")).tap();
\`\`\`
- Result: success

#### Step 2
- Intent: "enter username"
- Generated code:
\`\`\`
await element(by.id("username")).typeText("john_doe");
\`\`\`
- Result: john doe


## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. Generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. Wrap the generated code with backticks, without any additional formatting.
7. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;

exports[`PromptCreator should not include API search results section when not provided 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for an application using the provided UI testing framework API.
Please generate the minimal executable code to perform the desired intent based on the given information and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action.
2. Generate the minimal executable code required to perform the intent using the available API.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. Wrap the generated code with backticks, without any additional formatting.
7. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

Please provide your response below:"
`;
